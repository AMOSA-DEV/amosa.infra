---
description: 
globs: 
alwaysApply: true
---
# 태그 관리 방안

## 📋 개요

이 문서는 Mozart Cloud Terraform 프로젝트의 태그 관리 방안을 설명합니다.

## 🏷️ 태그 정책

### 필수 태그
모든 AWS 리소스에는 다음 3개의 필수 태그가 적용됩니다:

| 태그 키 | 설명 | 허용 값 | 예시 값 |
|---------|------|---------|---------|
| `Name` | AWS 리소스 이름 참조 | AWS 리소스 이름 | `vmss3-hyperbilling`, `S3ReadAccessRole` |
| `Environment` | 환경 구분 | `all`, `dev`, `stg`, `prd` | `dev`, `stg`, `prd` |
| `Project` | 프로젝트명 | `mozart-cloud` (고정) | `mozart-cloud` |

### 태그 구조
```hcl
variable "common_tags" {
  description = "모든 리소스에 적용할 공통 태그"
  type = object({
    Name        = string
    Environment = string
    Project     = string
  })
  default = {
    Name        = "-"                   # 기본값은 - 이고, 각 리소스별로 Name 세팅
    Environment = "dev"                  # all, dev, stg, prd 중 선택
    Project     = "mozart-cloud"         # 고정값
  }
}
```

## 📁 파일 구조

```
ou-Security/Logs/
├── variables.tf          # 공통 태그 변수 정의 (기본값 설정)
├── s3.tf                # S3 리소스 (var.common_tags 사용)
├── iam.tf               # IAM 리소스 (var.common_tags 사용)
├── outputs.tf           # 출력값
├── main.tf              # 메인 설명
├── .mdc                 # 이 문서 (Cursor 참조용)
```

## 🔧 사용 방법

### 1. 리소스에 태그 적용 (기본)
```hcl
resource "aws_s3_bucket" "hyperbilling" {
  bucket = "vmss3-hyperbilling"
  tags   = var.common_tags
}
```

### 2. Name 태그에 AWS 리소스 이름 적용 (기본)
```hcl
resource "aws_s3_bucket" "hyperbilling" {
  bucket = "vmss3-hyperbilling"
  tags = merge(var.common_tags, {
    Name = "vmss3-hyperbilling"  # AWS 리소스 이름과 동일
  })
}
```

### 3. 환경별 태그 적용
`terraform.tfvars` 파일을 생성하여 환경별로 다른 태그 적용:
```hcl
# terraform.tfvars
common_tags = {
  Name        = "-"
  Environment = "dev"  # all, dev, stg, prd 중 선택
  Project     = "mozart-cloud"  # 고정값
}
```

### 4. 추가 태그 적용 방법 (유일 허용 방법)
**⚠️ 필수 규칙:**
태그는 꼭 필요한 경우에만 추가로 적용한다.
기본적으로는 common_tags만 사용하되, 사용자의 별도 요청이 있을 때만 해당 태그를 추가한다.

**방법 3: 리소스별 개별 태그만 사용 (다른 방법 금지)**

```hcl
resource "aws_s3_bucket" "hyperbilling" {
  bucket = "vmss3-hyperbilling"
  tags = merge(var.common_tags, {
    Name         = "vmss3-hyperbilling"
    Owner        = "data-team"              # 요청시
    CostCenter   = "cc-12345"               # 요청시
    DataClass    = "confidential"           # 요청시
    StorageClass = "intelligent-tiering"    # 요청시
    Retention    = "1-year"                 # 요청시
  })
}
```

**⚠️ 금지된 방법들:**
- ❌ 방법 1: merge() 함수에 변수 사용
- ❌ 방법 2: locals 블록 사용
- ❌ 다른 추가 태그 적용 방법

## 🎯 태그 관리 원칙

### 1. 일관성
- 모든 리소스에 동일한 태그 구조 적용
- 태그 키는 PascalCase, 태그 값은 snake_case 사용 (최대한 지키고 어쩔 수 없으면 허용)

### 2. 단순성
- 필수 태그만 사용하여 복잡성 최소화
- 추가 태그는 특별한 요구사항이 있을 때만 사용

### 3. 자동화
- Terraform을 통한 태그 자동 적용
- 수동 태그 설정 금지

### 4. 명명 규칙
- **태그 키**: PascalCase (예: `DataClass`, `CostCenter`, `StorageClass`)
- **태그 값**: snake_case (예: `data_team`, `cc_12345`, `intelligent_tiering`)
- **예외**: AWS 리소스 이름은 원본 그대로 사용 (예: `vmss3-hyperbilling`)

## 📊 태그 활용

### 1. 비용 관리
- Environment 태그를 통한 환경별 비용 분석
- Project 태그를 통한 프로젝트별 비용 추적

### 2. 리소스 관리
- Name 태그를 통한 리소스 식별
- Environment 태그를 통한 환경별 리소스 그룹화

### 3. 보안 정책
- Project 태그를 통한 접근 제어
- Environment 태그를 통한 보안 정책 적용

## 🔄 태그 변경 절차

### 1. 개발 환경
1. `variables.tf`에서 태그 값 수정
2. `terraform plan`으로 변경사항 확인
3. `terraform apply`로 변경 적용

### 2. 운영 환경
1. 변경사항을 코드 리뷰
2. 테스트 환경에서 검증
3. 운영 환경에 단계적 적용

## ⚠️ 주의사항

### 1. 태그 변경 시 영향도
- 기존 리소스의 태그 변경 시 Terraform 상태 업데이트 필요
- 태그 변경으로 인한 리소스 재생성 가능성 고려

### 2. 태그 제한사항
- AWS 태그 제한: 최대 50개 태그, 키/값 각각 128자 제한
- 태그 키는 고유해야 함

### 3. 백업 및 복구
- 태그 변경 전 Terraform 상태 백업
- 롤백 계획 수립

## 📈 모니터링 및 감사

### 1. 태그 준수 확인
- AWS Config를 통한 태그 정책 준수 모니터링
- 정기적인 태그 감사 수행

### 2. 태그 사용 현황
- AWS Cost Explorer를 통한 태그별 비용 분석
- 태그 활용도 측정 및 개선

## 🔗 관련 문서

- [AWS 태그 모범 사례](mdc:https:/docs.aws.amazon.com/whitepapers/latest/tagging-best-practices)
- [Terraform 태그 관리](mdc:https:/www.terraform.io/docs/language/values/variables.html)
- [AWS Cost Allocation Tags](mdc:https:/docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html)







