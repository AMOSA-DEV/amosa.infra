---
description: 
globs: 
alwaysApply: true
---
# Mozart Cloud Terraform 프로젝트 MDC 룰

## 🎯 목적
Mozart Cloud 인프라 리소스를 Terraform으로 구성할 때 일관된 **리소스 네이밍**과 **코딩 스타일**을 유지하여 유지보수성과 가독성을 높이기 위함입니다.

---

## ✅ 기본 코딩 포맷 방안

### Terraform 스타일 가이드
- **Indent**: 스페이스 2칸
- **변수명/리소스명**: 소문자와 대시 (`kebab case`) 사용
- **모듈화**: 같은 타입의 리소스가 반복되거나 여러 환경(dev/stg/prd)에서 사용될 경우 `module`로 구성
- **파일 분리 권장**:
  - `main.tf`: 리소스 정의
  - `variables.tf`: 변수 정의
  - `outputs.tf`: 출력값 정의
  - `locals.tf`: 지역 변수 정의
  - `provider.tf`: provider 및 backend 설정
- **불필요한 주석 지양**: 일반적인 설명을 위한 주석은 작성하지 않음
---

## 📛 리소스 이름 규칙

### 기본 네이밍 포맷

```hcl
name = format(
  "%s%s-%s-%s-%s",
  var.project_key,    # 예: vms, mzc
  awsservice,         # 예: ecs, s3, rds 등
  var.system,         # 예: aps, dp, cp 등 - 생략 가능
  var.service,        # 예: frontend, backend, engine 등 (flat case만 허용)
  var.env             # 예: prd, stg, dev - 생략 가능
)
```

### 네이밍 규칙 요약

- **전체 리소스명은 kebab case**로 작성  
- **단일 변수명은 flat case만 허용**  
  예) `frontend`, `demandforcast`, `dataexplorer`
- **`-`(하이픈)**은 서로 다른 개념 (`project_key`, `system`, `env`)을 구분할 때 사용  
- `system`, `service`, `env`는 불분명하거나 공용일 경우 생략 가능

---

## ☑️ 환경 변수에 따른 조건적 생략 규칙

- 공통 태그 `common_tags` 변수는 동일 폴더 내의 `variables.tf` 파일에서 정의되며, 해당 default 값을 기준으로 리소스 이름 네이밍 방식을 결정합니다.
- `common_tags.Environment`의 **default 값이 `"all"`**로 설정된 경우, **모든 리소스의 이름에서 `var.env` 값은 생략**합니다.
- 이 규칙은 **코딩 시점에 하드코딩으로 적용**해야 하며, `var.env` 값을 조건문(`if` 문, 삼항 연산자 등)으로 분기하여 처리하지 않습니다.
- 즉, `Environment`의 default가 `"all"`인 경우에는 `format()` 함수 내에 `var.env`를 포함하지 않도록 작성합니다.

### ✅ 잘못된 예 (조건문 사용 – ❌ 지양)
```hcl
locals {
  hyperbilling_role_name = var.env == "all" ?
    format("%s%s-%s", var.project_key, "iam", "HyperbillingS3ReadRole") :
    format("%s%s-%s-%s", var.project_key, "iam", "HyperbillingS3ReadRole", var.env)
}
resource "aws_iam_role" "hyperbilling_s3_read_role" {
  name        =  locals.hyperbilling_role_name
}
```

### ✅ 올바른 예 (하드코딩 – ✅ 권장)
```
# common_tags.Environment 의 default 값이 "all"인 경우
resource "aws_iam_role" "hyperbilling_s3_read_role" {
  name        =  format("%s%s-%s", var.project_key, "iam", "HyperbillingS3ReadRole")
}
```

### 📌 주의
이 방식은 variables.tf 파일에 default 값이 명시되어 있을 경우에만 적용합니다.

다른 환경(dev/stg/prd)을 사용할 때에는 해당 환경에서 Environment 값을 오버라이드하도록 하고, 그에 따라 var.env 포함 여부도 명확히 하드코딩해야 합니다.

---

## 💼 IAM Role, Policy 네이밍 특칙

- `var.service` 자리에는 역할을 명확히 나타내는 **PascalCase 키워드**를 사용
- 예시 형식:

```hcl
name = format("%s%s-%s-%s", var.project_key, "iam", "EcsExecPolicy", var.env)
```

- 결과 예시: `mzciam-EcsExecPolicy-prd`

---

## 💡 예제

### ECS 서비스 예시

```hcl
resource "aws_ecs_service" "main" {
  name = format(
    "%s%s-%s-%s-%s",
    var.project_key,    # "mzc"
    "ecs",              # AWS 서비스
    var.system,         # "dp"
    var.service,        # "backend" (flat case만 허용)
    var.env             # "prd"
  )
}
# 결과: mzcecs-dp-backend-prd
```

### S3 버킷 예시 (공용 버킷으로 service 생략)

```hcl
resource "aws_s3_bucket" "main" {
  bucket = format("%s%s-%s-%s", var.project_key, "s3", system, var.env)
}
# 결과: mzcs3-aps-prd
```

### IAM Policy 예시

```hcl
resource "aws_iam_policy" "ecs_exec_policy" {
  name = format("%s%s-%s-%s", var.project_key, "iam", "EcsExecPolicy", var.env)
}
# 결과: mzciam-EcsExecPolicy-prd
```

---

## 📛 description 네이밍 규칙 요약

- **무조건 영어**로만 작성 (AWS에서 한글 지원하지 않는 서비스들 존재)